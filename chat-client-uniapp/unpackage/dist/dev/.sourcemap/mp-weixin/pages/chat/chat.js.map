{"version":3,"file":"chat.js","sources":["pages/chat/chat.vue","pages/chat/chat.vue?type=page"],"sourcesContent":["<template>\n  <view class=\"chat-container\">\n    <!-- 联系人列表 -->\n    <ContactList\n        :users=\"contacts\"\n        :selectedUserId=\"targetId\"\n        @select=\"handleSelectUser\"\n    />\n\n    <!-- 群组列表 -->\n    <GroupList\n        :groups=\"groups\"\n        :selectedGroupId=\"targetId\"\n        @select=\"handleSelectUser\"\n    />\n\n    <!-- 消息列表 -->\n    <scroll-view scroll-y class=\"msg-list\" :scroll-top=\"scrollTop\" @scrolltolower=\"loadMoreMessages\">\n      <view v-for=\"(item, index) in messages\" :key=\"item.msgId || index\"\n            :class=\"[\n              'msg-item',\n              item.from === userId ? 'msg-sent' : 'msg-received',\n              item.isOffline ? 'offline-msg' : '',\n              item.status === 'sending' ? 'msg-sending' : '',\n              item.status === 'failed' ? 'msg-failed' : '',\n              item.status === 'read' && item.from === userId ? 'msg-read' : ''\n            ]\">\n        <view class=\"msg-nickname\">{{ item.nickname || item.from }}</view>\n        <view class=\"msg-content\">{{ item.message }}</view>\n        <view class=\"msg-timestamp\">{{ formatTimestamp(item.timestamp) }}</view>\n\n        <!-- 发送方消息状态显示 -->\n        <view v-if=\"item.from === userId\" class=\"msg-status\">\n          <text v-if=\"item.status === 'sending'\">发送中...</text>\n          <text v-else-if=\"item.status === 'failed'\">\n            发送失败\n            <button @click=\"retrySend(item)\">重试</button>\n          </text>\n          <text v-else-if=\"item.status === 'success'\">未读</text>\n          <text v-else-if=\"item.status === 'read'\">已读</text>\n        </view>\n        <!-- 接收方不显示消息状态 -->\n      </view>\n    </scroll-view>\n\n    <!-- 输入区 -->\n    <view class=\"input-box\">\n      <input v-model=\"inputMsg\" placeholder=\"输入消息...\" class=\"msg-input\" />\n      <button @click=\"sendMsg\">发送</button>\n    </view>\n\n    <view>\n      <button @click=\"disconnect\">断开连接</button>\n    </view>\n\n    <!-- 连接状态显示 -->\n    <view class=\"status\">连接状态: {{ connectionStatus }}</view>\n  </view>\n</template>\n\n<script>\nimport {connectSocket, sendMsg, sendGroupMsg, isConnected, closeSocket, setReadAckHandler, sendReadAck} from '@/utils/socket.js'\nimport ContactList from '@/components/ContactList.vue'\nimport GroupList from '@/components/GroupList.vue'\n\nexport default {\n  components: {\n    ContactList,\n    GroupList\n  },\n  data() {\n    return {\n      messages: [],\n      inputMsg: '',\n      userId: '',\n      targetId: '',\n      contacts: [\n        {id: 'user1', name: '用户一', type: 'user'},\n        {id: 'user2', name: '用户二', type: 'user'}\n      ],\n      groups: [\n        {id: 'group1', name: '群聊1', type: 'group'},\n        {id: 'group2', name: '群聊2', type: 'group'}\n      ],\n      connectionStatus: '未连接',\n      scrollTop: 0, // 用于消息滚动控制\n      msgStatusMap: {}, // 存放消息发送状态，key为msgId，value为'sending'|'success'|'failed'|'read'\n    }\n  },\n  onLoad(options) {\n    // 路由参数提取\n    this.userId = options.userId || 'user1'\n    console.log('[页面加载] 当前用户ID:', this.userId)\n    // 默认选中联系人或群组中非自己的第一个\n    this.targetId = this.contacts.concat(this.groups).find(c => c.id !== this.userId)?.id || ''\n    this.connectionStatus = '连接中...'\n\n    // 注册全局已读回调：socket.js 收到 cmd=101 时只调用该回调，不再把消息抛给页面\n    setReadAckHandler((ids) => {\n      const list = Array.isArray(ids) ? ids : [ids];\n      this.handleReadAck(list);\n    });\n\n    connectSocket(this.userId, (msg) => {\n      console.log('[WebSocket] 收到消息:', msg);\n\n      if (Array.isArray(msg)) {\n        // 批量离线消息，追加到 messages 列表，并标记 isOffline\n        const offlineMsgs = msg.map(m => {\n          // 发送方离线消息状态为 sending，接收方离线消息状态为 null（不显示）\n          const status = (m.from === this.userId) ? 'sending' : null;\n          return { ...m, isOffline: true, status };\n        });\n        this.messages.push(...offlineMsgs);\n\n        // 仅处理接收方未读消息\n        const unreadOfflineMsgs = offlineMsgs.filter(m => m.from !== this.userId);\n        const unreadMsgIds = unreadOfflineMsgs.map(m => m.msgId).filter(id => !!id);\n\n        this.$nextTick(() => {\n          if (unreadMsgIds.length > 0) {\n            sendReadAck(unreadMsgIds); // 发送已读确认\n          }\n          this.scrollTop = 100000; // 滚动到最新消息\n        });\n      } else {\n        // 单条实时消息\n        const existingIdx = this.messages.findIndex(m => m.msgId === msg.msgId);\n        if (existingIdx !== -1) {\n          this.messages[existingIdx] = { ...this.messages[existingIdx], ...msg };\n        } else {\n          // 新消息初始状态：发送方为 sending，接收方不显示状态\n          const initStatus = (msg.from === this.userId) ? msg.status || 'sending' : null;\n\n          this.messages.push({ ...msg, isOffline: false, status: initStatus });\n        }\n\n        this.$nextTick(() => {\n          if (msg.msgId && msg.from !== this.userId && msg.from === this.targetId) {\n            sendReadAck([msg.msgId]);\n          }\n          this.scrollTop = 100000; // 滚动到最新消息\n        });\n      }\n    });\n\n    // 监听连接状态变化（简单模拟，实际可扩展socket.js发事件）\n    setInterval(() => {\n      const status = isConnected() ? '已连接' : '未连接'\n      if (this.connectionStatus !== status) {\n        console.log('[连接状态] 状态变化:', status)\n      }\n      this.connectionStatus = status;\n    }, 1000)\n  },\n  onUnload() {\n    // 页面卸载时取消注册，避免重复回调/内存泄漏\n    setReadAckHandler(null);\n  },\n  methods: {\n    // 发送消息方法，支持发送状态回调更新\n    sendMsg() {\n      if (!this.inputMsg) return\n\n      // 根据选中目标是用户还是群组，调用不同接口\n      const target = this.contacts.concat(this.groups).find(c => c.id === this.targetId)\n      if (!target) {\n        uni.showToast({title: '请选择联系人或群组', icon: 'none'})\n        return\n      }\n      console.log('[发送] 目标:', this.targetId, '消息:', this.inputMsg)\n\n      // 生成唯一消息ID，避免渲染重复和状态匹配问题\n      const msgId = 'msg_' + Date.now() + '_' + Math.floor(Math.random() * 10000)\n\n      // 创建消息对象，添加到消息列表，状态初始为sending\n      const newMsg = {\n        msgId,\n        from: this.userId,\n        to: this.targetId,\n        message: this.inputMsg,\n        status: 'sending',\n        isOffline: false,\n        timestamp: Date.now(),\n        type: target.type,\n        nickname: this.contacts.find(c => c.id === this.userId)?.name || this.userId\n      };\n      this.messages.push(newMsg);\n\n      // 发送消息，传入状态更新回调，动态更新消息发送状态\n      const onStatusChange = (status) => {\n        this.msgStatusMap[msgId] = status;\n        newMsg.status = status;\n      };\n\n      if (target.type === 'user') {\n        sendMsg(this.targetId, this.inputMsg, this.userId, onStatusChange);\n      } else if (target.type === 'group') {\n        sendGroupMsg(this.targetId, this.inputMsg, this.userId, onStatusChange);\n      }\n\n      this.inputMsg = ''\n\n      this.$nextTick(() => {\n        this.scrollTop = 100000\n      })\n    },\n\n    // 选择聊天对象，切换聊天目标\n    handleSelectUser(id) {\n      this.targetId = id\n      console.log('[切换聊天对象] 目标ID:', id)\n      // 切换聊天对象时清空消息（可改为加载历史）\n      this.messages = []\n    },\n\n    // 滚动到底部，加载更多消息（占位）\n    loadMoreMessages() {\n      // TODO: 实现消息分页加载\n      console.log('滚动到底部，加载更多消息')\n    },\n\n    // 处理已读信息操作，仅更新发送方消息状态\n    handleReadAck(msgIds) {\n      msgIds.forEach(msgId => {\n        const msg = this.messages.find(m => m.msgId === msgId);\n        if (msg) {\n          // 仅更新发送方状态\n          if (msg.from === this.userId && msg.status !== 'sending' && msg.status !== 'failed' && msg.status !== 'read') {\n            msg.status = 'read';\n            this.msgStatusMap[msgId] = 'read';\n          }\n        }\n      });\n    },\n\n    // 关闭连接操作\n    disconnect() {\n      closeSocket()\n      console.log('手动断开 WebSocket 连接')\n    },\n\n    // 格式化时间戳为 HH:mm 格式\n    formatTimestamp(ts) {\n      if (!ts) return '';\n      const date = new Date(ts);\n      const h = date.getHours().toString().padStart(2, '0');\n      const m = date.getMinutes().toString().padStart(2, '0');\n      return `${h}:${m}`;\n    },\n\n    // 重试发送失败的消息，更新状态\n    retrySend(msg) {\n      if (!msg.msgId) {\n        uni.showToast({title: '无法重发：缺少msgId', icon: 'none'});\n        return;\n      }\n      // 设置状态为发送中\n      msg.status = 'sending';\n      this.msgStatusMap[msg.msgId] = 'sending';\n\n      // 重新发送消息，传入回调更新状态\n      const onStatusChange = (status) => {\n        this.msgStatusMap[msg.msgId] = status;\n        msg.status = status;\n      };\n\n      if (msg.type === 'user') {\n        sendMsg(msg.to, msg.message, msg.from, onStatusChange);\n      } else if (msg.type === 'group') {\n        sendGroupMsg(msg.to, msg.message, msg.from, onStatusChange);\n      }\n    }\n  }\n}\n</script>\n\n<style>\n.chat-container {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n}\n\n.msg-list {\n  flex: 1;\n  padding: 10px;\n  overflow-y: auto;\n}\n\n.msg-item {\n  margin: 5px 0;\n  max-width: 70%;\n  padding: 8px 12px;\n  border-radius: 10px;\n  word-wrap: break-word;\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  padding-bottom: 18px;\n}\n\n/* 自己发的消息右对齐，背景颜色不同 */\n.msg-sent {\n  align-self: flex-end;\n  background-color: #DCF8C6;\n}\n\n/* 对方消息左对齐 */\n.msg-received {\n  align-self: flex-start;\n  background-color: #FFF;\n  border: 1px solid #ddd;\n}\n\n/* 已读显示 */\n.msg-read {\n  color: #4caf50;\n  font-weight: 500;\n  opacity: 1;\n}\n\n.msg-status {\n  position: absolute;\n  bottom: 2px;\n  right: 8px;\n  font-size: 11px;\n  color: #888;\n  display: flex;\n  align-items: center;\n}\n\n.msg-status text {\n  margin-left: 6px;\n}\n.msg-status text:nth-child(3) {\n  color: #999; /* 未读灰色 */\n  font-weight: 500;\n}\n.msg-status text:nth-child(4) {\n  color: #4caf50; /* 已读绿色 */\n}\n\n/* 离线消息样式 */\n.offline-msg {\n  border-left: 4px solid #ff9800;\n  background-color: #fff8e1;\n}\n\n/* 发送中消息样式，半透明 */\n.msg-sending {\n  opacity: 0.7;\n}\n\n/* 发送失败消息样式，红色字体 */\n.msg-failed {\n  color: red;\n}\n\n.msg-nickname {\n  font-weight: bold;\n  font-size: 12px;\n  margin-bottom: 4px;\n  color: #555;\n}\n\n.msg-content {\n  font-size: 14px;\n  color: #333;\n}\n\n.msg-timestamp {\n  font-size: 10px;\n  color: #999;\n  align-self: flex-end;\n  margin-top: 4px;\n  margin-bottom: 2px;\n}\n\n.input-box {\n  display: flex;\n  padding: 10px;\n}\n\n.msg-input {\n  flex: 1;\n  border: 1px solid #ccc;\n  padding: 5px;\n}\n\n.status {\n  padding: 5px 10px;\n  font-size: 12px;\n  color: #888;\n}\n\n.msg-status button {\n  margin-left: 6px;\n  font-size: 12px;\n  color: #f56c6c;\n  background: transparent;\n  border: none;\n  cursor: pointer;\n}\n</style>","import MiniProgramPage from '/Users/Zhuanz/Documents/t-io/chat-system/chat-client-uniapp/pages/chat/chat.vue'\nwx.createPage(MiniProgramPage)"],"names":["uni","setReadAckHandler","connectSocket","sendReadAck","isConnected","sendMsg","sendGroupMsg","closeSocket"],"mappings":"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"}