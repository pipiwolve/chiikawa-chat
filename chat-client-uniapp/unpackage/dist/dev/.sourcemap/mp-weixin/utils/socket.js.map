{"version":3,"file":"socket.js","sources":["utils/socket.js"],"sourcesContent":["\nlet socketTask = null;\nlet reconnectTimer = null;\nlet reconnectCount = 0;\nconst MAX_RECONNECT = 6;\n\nlet currentUserId = null;\nlet messageQueue = [];\nconst QUEUE_KEY = 'socket_message_queue';\n\n// 存放消息状态回调，key为msgId，value为回调函数\nconst msgStatusCallbacks = new Map();\n\n// 存放消息ACK超时定时器，key为msgId，value为定时器ID\nconst ackTimers = new Map();\n\nconst CONNECT_STATUS = {\n    DISCONNECTED: 0,\n    CONNECTING: 1,\n    CONNECTED: 2,\n};\nlet connectStatus = CONNECT_STATUS.DISCONNECTED;\n\nfunction generateUUID() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n        const r = Math.random() * 16 | 0,\n            v = c === 'x' ? r : (r & 0x3 | 0x8);\n        return v.toString(16);\n    });\n}\n\nfunction persistQueue() {\n    try {\n        uni.setStorageSync(QUEUE_KEY, messageQueue);\n        console.log('[socket] 缓存队列已持久化，长度:', messageQueue.length);\n    } catch (e) {\n        console.error('[socket] persistQueue error', e);\n    }\n}\n\nfunction loadQueueFromStorage() {\n    try {\n        const q = uni.getStorageSync(QUEUE_KEY);\n        messageQueue = Array.isArray(q) ? q : [];\n        console.log('[socket] 从本地缓存恢复队列，长度:', messageQueue.length);\n    } catch (e) {\n        messageQueue = [];\n    }\n}\n\nexport function connectSocket(userId, onMessage) {\n    if (connectStatus === CONNECT_STATUS.CONNECTED || connectStatus === CONNECT_STATUS.CONNECTING) {\n        console.warn('WebSocket 已经连接或正在连接中，跳过重复连接');\n        return;\n    }\n\n    currentUserId = userId;\n    connectStatus = CONNECT_STATUS.CONNECTING;\n    console.log('[socket] 准备连接 WebSocket，用户ID:', userId);\n\n    const wsUrl = `ws://192.168.2.5:9326?name=${encodeURIComponent(userId)}`; // 请根据实际IP端口替换\n    socketTask = uni.connectSocket({\n        url: wsUrl,\n        success() {\n            console.log('WebSocket 连接请行求发起');\n        },\n        fail(err) {\n            console.error('WebSocket 连接请求失败', err);\n            attemptReconnect(onMessage);\n        },\n    });\n\n    socketTask.onOpen(() => {\n        console.log('📡 WebSocket 已打开');\n        connectStatus = CONNECT_STATUS.CONNECTED;\n        reconnectCount = 0;\n\n        // 发送登录消息\n        const loginData = {\n            cmd: 1,\n            from: currentUserId,\n        };\n        socketTask.send({ data: JSON.stringify(loginData) });\n\n        loadQueueFromStorage();\n        flushQueue();\n    });\n\n    socketTask.onMessage((res) => {\n        const dataStr = res.data;\n        if (!dataStr || dataStr === 'null' || dataStr === 'undefined') {\n            console.warn('收到无效消息:', dataStr);\n            return;\n        }\n        if (dataStr.trim().startsWith('{') || dataStr.trim().startsWith('[')) {\n            try {\n                const data = JSON.parse(dataStr);\n\n                // 处理ACK消息，cmd == -1 表示后端确认收到消息\n                if (data.cmd === -1 && data.msgId) {\n                    const cb = msgStatusCallbacks.get(data.msgId);\n                    if (cb) {\n                        cb('success'); // 标记成功\n                        console.log('安全握手成功～')\n                        msgStatusCallbacks.delete(data.msgId);\n                    }\n                    // 清理对应ACK超时定时器\n                    if (ackTimers.has(data.msgId)) {\n                        clearTimeout(ackTimers.get(data.msgId));\n                        ackTimers.delete(data.msgId);\n                    }\n                    return; // 不转发ACK消息给业务处理，防止重复显示\n                }\n\n                // 非ACK普通消息回调\n                onMessage && onMessage(data);\n            } catch (e) {\n                console.error('消息解析错误', e, dataStr);\n            }\n        } else {\n            console.log('收到非 JSON 消息:', dataStr);\n        }\n    });\n\n    socketTask.onClose(() => {\n        console.log('WebSocket 已关闭');\n        connectStatus = CONNECT_STATUS.DISCONNECTED;\n        attemptReconnect(onMessage);\n    });\n\n    socketTask.onError((err) => {\n        console.error('WebSocket 错误', err);\n        connectStatus = CONNECT_STATUS.DISCONNECTED;\n        attemptReconnect(onMessage);\n    });\n}\n\nfunction attemptReconnect(onMessage) {\n    if (reconnectCount >= MAX_RECONNECT) {\n        console.warn('重连次数达到上限，停止重连');\n        return;\n    }\n    if (reconnectTimer) return;\n\n    reconnectCount++;\n    const delay = Math.min(30000, 5000 * Math.pow(2, reconnectCount - 1));\n    console.log(`第${reconnectCount}次重连，${delay}ms后尝试`);\n\n    reconnectTimer = setTimeout(() => {\n        reconnectTimer = null;\n        connectSocket(currentUserId, onMessage);\n    }, delay);\n}\n\nfunction flushQueue() {\n    if (!messageQueue.length) {\n        console.log('[socket] flushQueue：无缓存消息需要发送');\n        return;\n    }\n    console.log('[socket] flushQueue start, 消息数量:', messageQueue.length);\n\n    const sendNext = () => {\n        if (!messageQueue.length) {\n            console.log('[socket] flushQueue 完成，缓存队列清空');\n            persistQueue();\n            return;\n        }\n        const item = messageQueue[0];\n        try {\n            socketTask.send({\n                data: JSON.stringify(item),\n                success() {\n                    console.log('[socket] flushQueue 发送成功:', item);\n                    if (item.msgId && msgStatusCallbacks.has(item.msgId)) {\n                        msgStatusCallbacks.get(item.msgId)('sending');\n                        // 设置ACK超时定时器\n                        if (ackTimers.has(item.msgId)) {\n                            clearTimeout(ackTimers.get(item.msgId));\n                        }\n                        const timerId = setTimeout(() => {\n                            const cb = msgStatusCallbacks.get(item.msgId);\n                            if (cb) {\n                                cb('failed'); // 超时未收到ACK标记失败\n                                msgStatusCallbacks.delete(item.msgId);\n                            }\n                            ackTimers.delete(item.msgId);\n                        }, 5000);\n                        ackTimers.set(item.msgId, timerId);\n                    }\n                    messageQueue.shift();\n                    persistQueue();\n                    setTimeout(sendNext, 50);\n                },\n                fail(err) {\n                    console.warn('[socket] flush fail', err);\n                    if (item.msgId && msgStatusCallbacks.has(item.msgId)) {\n                        msgStatusCallbacks.get(item.msgId)('failed');\n                    }\n                },\n            });\n        } catch (e) {\n            console.error('[socket] flush exception', e);\n        }\n    };\n    sendNext();\n}\n\nfunction sendData(data, onStatusChange) {\n    if (!data.msgId) {\n        data.msgId = generateUUID();\n    }\n    if (onStatusChange && typeof onStatusChange === 'function') {\n        msgStatusCallbacks.set(data.msgId, onStatusChange);\n    }\n    if (connectStatus !== CONNECT_STATUS.CONNECTED || !socketTask) {\n        console.warn('WebSocket 未连接，消息加入队列缓存', data);\n        messageQueue.push(data);\n        persistQueue();\n        if (onStatusChange) onStatusChange('failed');\n        return;\n    }\n    try {\n        socketTask.send({\n            data: JSON.stringify(data),\n            success() {\n                console.log('[socket] 消息发送成功', data);\n                if (onStatusChange) onStatusChange('sending');\n                // 设置ACK超时定时器\n                if (ackTimers.has(data.msgId)) {\n                    clearTimeout(ackTimers.get(data.msgId));\n                }\n                const timerId = setTimeout(() => {\n                    const cb = msgStatusCallbacks.get(data.msgId);\n                    if (cb) {\n                        cb('failed'); // 超时未收到ACK标记失败\n                        msgStatusCallbacks.delete(data.msgId);\n                    }\n                    ackTimers.delete(data.msgId);\n                }, 5000);\n                ackTimers.set(data.msgId, timerId);\n            },\n            fail(err) {\n                console.error('发送消息失败，加入缓存', err, data);\n                messageQueue.push(data);\n                persistQueue();\n                if (onStatusChange) onStatusChange('failed');\n            },\n        });\n    } catch (e) {\n        console.error('发送消息异常，消息加入缓存', e, data);\n        messageQueue.push(data);\n        persistQueue();\n        if (onStatusChange) onStatusChange('failed');\n    }\n}\n\nexport function sendMsg(toUserId, msg, fromUserId, onStatusChange) {\n    const data = {\n        cmd: 2,\n        type: 'private',\n        from: fromUserId,\n        to: toUserId,\n        message: msg,\n        timestamp: Date.now(),\n    };\n    sendData(data, onStatusChange);\n}\n\nexport function sendGroupMsg(groupId, msg, fromUserId, onStatusChange) {\n    const data = {\n        cmd: 3,\n        type: 'group',\n        from: fromUserId,\n        to: groupId,\n        message: msg,\n        timestamp: Date.now(),\n    };\n    sendData(data, onStatusChange);\n}\n\nexport function retrySend(msgObj, onStatusChange) {\n    if (!msgObj.msgId) {\n        console.warn('retrySend 缺少 msgId，无法重发');\n        return;\n    }\n    console.log('[socket] retrySend 重发消息', msgObj);\n    sendData(msgObj, onStatusChange);\n}\n\nexport function closeSocket() {\n    if (socketTask) {\n        console.log('[socket] 主动关闭 WebSocket 连接');\n        socketTask.close();\n        socketTask = null;\n        connectStatus = CONNECT_STATUS.DISCONNECTED;\n        if (reconnectTimer) {\n            clearTimeout(reconnectTimer);\n            reconnectTimer = null;\n        }\n        reconnectCount = 0;\n    }\n}\n\nexport function isConnected() {\n    return connectStatus === CONNECT_STATUS.CONNECTED;\n}"],"names":["uni"],"mappings":"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"}