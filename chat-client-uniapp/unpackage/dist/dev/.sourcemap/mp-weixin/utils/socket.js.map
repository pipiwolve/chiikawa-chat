{"version":3,"file":"socket.js","sources":["utils/socket.js"],"sourcesContent":["let socketTask = null;\nlet reconnectTimer = null;\nlet reconnectCount = 0;\nconst MAX_RECONNECT = 6;\n\nlet currentUserId = null;\nlet messageQueue = [];\nconst QUEUE_KEY = 'socket_message_queue';\nlet onReadAck = null;\n\nconst msgStatusCallbacks = new Map();\nconst ackTimers = new Map();\n\nconst CONNECT_STATUS = {\n    DISCONNECTED: 0,\n    CONNECTING: 1,\n    CONNECTED: 2,\n};\nlet connectStatus = CONNECT_STATUS.DISCONNECTED;\n\nexport function connectSocket(userId, onMessage) {\n    if (connectStatus === CONNECT_STATUS.CONNECTED || connectStatus === CONNECT_STATUS.CONNECTING) {\n        console.warn('WebSocket 已经连接或正在连接中，跳过重复连接');\n        return;\n    }\n\n    currentUserId = userId;\n    connectStatus = CONNECT_STATUS.CONNECTING;\n    console.log('[socket] 准备连接 WebSocket，用户ID:', userId);\n\n    const wsUrl = `ws://192.168.110.238:9326?name=${encodeURIComponent(userId)}`;\n\n    try {\n        socketTask = uni.connectSocket({\n            url: wsUrl,\n            success() { console.log('WebSocket 连接请求已发起'); },\n            fail(err) { console.error('WebSocket 连接请求失败', err); attemptReconnect(onMessage); },\n        });\n    } catch (e) {\n        console.error('WebSocket 连接异常', e);\n        attemptReconnect(onMessage);\n        return;\n    }\n\n    socketTask.onOpen(() => {\n        console.log('📡 WebSocket 已打开');\n        connectStatus = CONNECT_STATUS.CONNECTED;\n        reconnectCount = 0;\n\n        const loginData = { cmd: 1, from: currentUserId };\n        sendRaw(loginData);\n\n        loadQueueFromStorage();\n        autoSendOfflineReadAck();\n        flushQueue(onMessage);\n    });\n\n    socketTask.onMessage((res) => {\n        const dataStr = res.data;\n        if (!dataStr || dataStr === 'null' || dataStr === 'undefined') return;\n\n        try {\n            const data = JSON.parse(dataStr);\n\n            // 已读回执 101 只更新发送方\n            if (data.cmd === 101 && data.msgIds && Array.isArray(data.msgIds)) {\n                if (currentUserId === data.from) {\n                    onReadAck && onReadAck(data.msgIds);\n                }\n            }\n            // ACK确认 -1\n            else if (data.cmd === -1 && data.msgId) {\n                const cb = msgStatusCallbacks.get(data.msgId);\n                if (cb) { cb('success'); msgStatusCallbacks.delete(data.msgId); }\n                if (ackTimers.has(data.msgId)) { clearTimeout(ackTimers.get(data.msgId)); ackTimers.delete(data.msgId); }\n            }\n            // 普通消息处理\n            else {\n                onMessage && onMessage(data);\n                if (data.msgId && data.cmd !== 101 && data.cmd !== -1) sendAck(data.msgId);\n            }\n        } catch (e) {\n            console.error('消息解析错误', e, dataStr);\n        }\n    });\n\n    socketTask.onClose(() => {\n        console.log('WebSocket 已关闭');\n        connectStatus = CONNECT_STATUS.DISCONNECTED;\n        attemptReconnect(onMessage);\n    });\n\n    socketTask.onError((err) => {\n        console.error('WebSocket 错误', err);\n        connectStatus = CONNECT_STATUS.DISCONNECTED;\n        attemptReconnect(onMessage);\n    });\n}\n\n// 自动发送离线消息已读回执，只发送接收方消息\nfunction autoSendOfflineReadAck() {\n    if (!messageQueue.length) return;\n    const offlineMsgIds = messageQueue\n        .filter(item => item.msgId && item.from !== currentUserId)\n        .map(item => item.msgId);\n    if (offlineMsgIds.length > 0) sendReadAck(offlineMsgIds);\n}\n\nfunction generateUUID() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n        const r = Math.random() * 16 | 0,\n            v = c === 'x' ? r : (r & 0x3 | 0x8);\n        return v.toString(16);\n    });\n}\n\nfunction persistQueue() {\n    try {\n        uni.setStorageSync(QUEUE_KEY, messageQueue);\n        console.log('[socket] 缓存队列已持久化，长度:', messageQueue.length);\n    } catch (e) {\n        console.error('[socket] persistQueue error', e);\n    }\n}\n\nfunction loadQueueFromStorage() {\n    try {\n        const q = uni.getStorageSync(QUEUE_KEY);\n        if (Array.isArray(q)) {\n            messageQueue = q;\n        } else {\n            messageQueue = [];\n        }\n        messageQueue = messageQueue.filter(item => {\n            return !(item && (item.cmd === 99 || item.cmd === 100));\n        });\n        console.log('[socket] 从本地缓存恢复队列，长度:', messageQueue.length);\n    } catch (e) {\n        console.error('[socket] 从本地缓存恢复队列异常', e);\n        messageQueue = [];\n    }\n}\n\nfunction attemptReconnect(onMessage) {\n    if (reconnectCount >= MAX_RECONNECT) {\n        console.warn('重连次数达到上限，停止重连');\n        return;\n    }\n    if (reconnectTimer) return;\n\n    reconnectCount++;\n    const delay = Math.min(30000, 5000 * Math.pow(2, reconnectCount - 1));\n    console.log(`第${reconnectCount}次重连，${delay}ms后尝试`);\n\n    reconnectTimer = setTimeout(() => {\n        reconnectTimer = null;\n        connectSocket(currentUserId, onMessage);\n    }, delay);\n}\n\nfunction sendRaw(data) {\n    if (socketTask && connectStatus === CONNECT_STATUS.CONNECTED) {\n        try {\n            socketTask.send({ data: JSON.stringify(data) });\n        } catch (e) {\n            console.error('[socket] 发送消息异常', e, data);\n        }\n    } else {\n        console.warn('[socket] WebSocket未连接，无法发送消息:', data);\n    }\n}\n\nfunction flushQueue(onMessage) {\n    if (!messageQueue.length) {\n        console.log('[socket] flushQueue：无缓存消息需要发送');\n        return;\n    }\n    console.log('[socket] flushQueue start, 消息数量:', messageQueue.length);\n\n    const sendNext = () => {\n        if (!messageQueue.length) {\n            console.log('[socket] flushQueue 完成，缓存队列清空');\n            persistQueue();\n            return;\n        }\n        const item = messageQueue[0];\n        try {\n            socketTask.send({\n                data: JSON.stringify(item),\n                success() {\n                    console.log('[socket] flushQueue 发送成功:', item);\n                    setupAckTimeout(item.msgId);\n                    messageQueue.shift();\n                    persistQueue();\n                    setTimeout(sendNext, 50);\n                },\n                fail(err) {\n                    console.warn('[socket] flushQueue 发送失败', err);\n                    // 不调用状态回调，等待下一次flush重试\n                },\n            });\n        } catch (e) {\n            console.error('[socket] flushQueue 异常', e);\n        }\n    };\n    sendNext();\n}\n\nfunction setupAckTimeout(msgId) {\n    if (!msgId) return;\n    if (ackTimers.has(msgId)) {\n        clearTimeout(ackTimers.get(msgId));\n    }\n    const timerId = setTimeout(() => {\n        const cb = msgStatusCallbacks.get(msgId);\n        if (cb) {\n            cb('failed');\n            msgStatusCallbacks.delete(msgId);\n        }\n        ackTimers.delete(msgId);\n    }, 5000);\n    ackTimers.set(msgId, timerId);\n}\n\nfunction sendData(data, onStatusChange) {\n    if (!data.msgId) {\n        data.msgId = generateUUID();\n    }\n    if (onStatusChange && typeof onStatusChange === 'function') {\n        msgStatusCallbacks.set(data.msgId, onStatusChange);\n    }\n    if (onStatusChange) onStatusChange('sending');\n\n    if (connectStatus !== CONNECT_STATUS.CONNECTED || !socketTask) {\n        console.warn('WebSocket 未连接，消息加入队列缓存', data);\n        messageQueue.push(data);\n        persistQueue();\n        if (onStatusChange) onStatusChange('failed');\n        return;\n    }\n\n    try {\n        socketTask.send({\n            data: JSON.stringify(data),\n            success() {\n                console.log('[socket] 消息发送成功', data);\n                setupAckTimeout(data.msgId);\n            },\n            fail(err) {\n                console.error('发送消息失败，加入缓存', err, data);\n                messageQueue.push(data);\n                persistQueue();\n                if (onStatusChange) onStatusChange('failed');\n            },\n        });\n    } catch (e) {\n        console.error('发送消息异常，消息加入缓存', e, data);\n        messageQueue.push(data);\n        persistQueue();\n        if (onStatusChange) onStatusChange('failed');\n    }\n}\n\nexport function sendMsg(toUserId, msg, fromUserId, onStatusChange) {\n    const data = {\n        cmd: 2,\n        type: 'private',\n        from: fromUserId,\n        to: toUserId,\n        message: msg,\n        timestamp: Date.now(),\n    };\n    sendData(data, onStatusChange);\n}\n\nexport function sendGroupMsg(groupId, msg, fromUserId, onStatusChange) {\n    const data = {\n        cmd: 3,\n        type: 'group',\n        from: fromUserId,\n        to: groupId,\n        message: msg,\n        timestamp: Date.now(),\n    };\n    sendData(data, onStatusChange);\n}\n\nexport function retrySend(msgObj, onStatusChange) {\n    if (!msgObj.msgId) {\n        console.warn('retrySend 缺少 msgId，无法重发');\n        return;\n    }\n    console.log('[socket] retrySend 重发消息', msgObj);\n    sendData(msgObj, onStatusChange);\n}\n\nfunction sendAck(msgId) {\n    if (socketTask && connectStatus === CONNECT_STATUS.CONNECTED) {\n        const ackData = {\n            cmd: 99,\n            msgId: msgId,\n        };\n        try {\n            socketTask.send({ data: JSON.stringify(ackData) });\n            console.log('[socket] 发送ACK确认消息:', ackData);\n        } catch (e) {\n            console.error('[socket] 发送ACK消息失败', e);\n        }\n    }\n}\n\nexport function sendReadAck(msgIds) {\n    if (!Array.isArray(msgIds) || msgIds.length === 0) {\n        console.warn('[socket] sendReadAck 缺少 msgIds');\n        return;\n    }\n    if (socketTask && connectStatus === CONNECT_STATUS.CONNECTED) {\n        const ackData = {\n            cmd: 100,\n            msgIds: msgIds\n        };\n        try {\n            socketTask.send({ data: JSON.stringify(ackData) });\n            console.log('[socket] 发送已读确认:', ackData);\n        } catch (e) {\n            console.error('[socket] 发送已读确认失败', e);\n        }\n    }\n}\n\nexport function setReadAckHandler(callback) {\n    onReadAck = callback;\n}\n\nexport function closeSocket() {\n    if (socketTask) {\n        console.log('[socket] 主动关闭 WebSocket 连接');\n        socketTask.close();\n        socketTask = null;\n        connectStatus = CONNECT_STATUS.DISCONNECTED;\n        if (reconnectTimer) {\n            clearTimeout(reconnectTimer);\n            reconnectTimer = null;\n        }\n        reconnectCount = 0;\n    }\n}\n\nexport function isConnected() {\n    return connectStatus === CONNECT_STATUS.CONNECTED;\n}"],"names":["uni"],"mappings":"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"}